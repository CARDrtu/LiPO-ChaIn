{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dcd59743",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Speed</th>\n",
       "      <th>Altitude</th>\n",
       "      <th>ir</th>\n",
       "      <th>luminosity</th>\n",
       "      <th>pm1s</th>\n",
       "      <th>pm25s</th>\n",
       "      <th>...</th>\n",
       "      <th>a03um01Lair</th>\n",
       "      <th>a05um01Lair</th>\n",
       "      <th>a1um01Lair</th>\n",
       "      <th>a25um01Lair</th>\n",
       "      <th>a5um01Lair</th>\n",
       "      <th>a10um01Lair</th>\n",
       "      <th>Co2</th>\n",
       "      <th>Temp</th>\n",
       "      <th>Hum</th>\n",
       "      <th>Unnamed: 23</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Date, Time, Latitude, Longitude, Speed, Altitude, ir, luminosity, pm1s, pm25s, pm10s, pm1e, pm25e, pm10e, a03um01Lair, a05um01Lair, a1um01Lair, a25um01Lair, a5um01Lair, a10um01Lair, Co2, Temp, Hum, Unnamed: 23]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 24 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-2-1606c3588759>:439: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  figspeed.show()\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/GRAPHS/speed.eps'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/ipywidgets/widgets/interaction.py\u001b[0m in \u001b[0;36mobserver\u001b[0;34m(change)\u001b[0m\n\u001b[1;32m     77\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m             \u001b[0mclear_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 79\u001b[0;31m             \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     80\u001b[0m             \u001b[0mshow_inline_matplotlib_plots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mw\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcontrols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-2-1606c3588759>\u001b[0m in \u001b[0;36mchange_parameters\u001b[0;34m(start, end, speed, altitude, ir, luminosity, pm1s, pm25s, pm10s, pm1e, pm25e, pm10e, a03um01lair, a05um01lair, a1um01lair, a25um01lair, a5um01lair, a10um01lair, co2, temp, hum)\u001b[0m\n\u001b[1;32m    438\u001b[0m     \u001b[0max2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    439\u001b[0m     \u001b[0mfigspeed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 440\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/GRAPHS/speed.eps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbbox_inches\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'tight'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpad_inches\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    441\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/GRAPHS/speed.pdf'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbbox_inches\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'tight'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpad_inches\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    442\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    964\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    965\u001b[0m     \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 966\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    967\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m# need this if 'transparent=True' to reset colors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    968\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(self, fname, transparent, **kwargs)\u001b[0m\n\u001b[1;32m   3003\u001b[0m                 \u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_edgecolor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'none'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3005\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3006\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3007\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtransparent\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2253\u001b[0m                 \u001b[0;31m# force the figure dpi to 72), so we need to set it again here.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2254\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2255\u001b[0;31m                     result = print_method(\n\u001b[0m\u001b[1;32m   2256\u001b[0m                         \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2257\u001b[0m                         \u001b[0mfacecolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfacecolor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/backends/backend_ps.py\u001b[0m in \u001b[0;36mprint_eps\u001b[0;34m(self, outfile, *args, **kwargs)\u001b[0m\n\u001b[1;32m    828\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    829\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mprint_eps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 830\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_print_ps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'eps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    831\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    832\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete_parameter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"3.4\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dpi\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    429\u001b[0m                          \u001b[0;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    430\u001b[0m                 **kwargs)\n\u001b[0;32m--> 431\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    432\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    433\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/backends/backend_ps.py\u001b[0m in \u001b[0;36m_print_ps\u001b[0;34m(self, outfile, format, dpi, metadata, papertype, orientation, *args, **kwargs)\u001b[0m\n\u001b[1;32m    869\u001b[0m                    \u001b[0;32mif\u001b[0m \u001b[0mmpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'text.usetex'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m                    self._print_figure)\n\u001b[0;32m--> 871\u001b[0;31m         printer(outfile, format, dpi=dpi, dsc_comments=dsc_comments,\n\u001b[0m\u001b[1;32m    872\u001b[0m                 orientation=orientation, papertype=papertype, **kwargs)\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1667\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1668\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1669\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1670\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1671\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/matplotlib/backends/backend_ps.py\u001b[0m in \u001b[0;36m_print_figure\u001b[0;34m(self, outfile, format, dpi, dsc_comments, orientation, papertype, bbox_inches_restore)\u001b[0m\n\u001b[1;32m   1032\u001b[0m                 \u001b[0mprint_figure_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfh\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1033\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1034\u001b[0;31m                 \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'latin-1'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfh\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1035\u001b[0m                     \u001b[0mprint_figure_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfh\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1036\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/GRAPHS/speed.eps'"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1202f86fabdf4a3a92e2bf5a6859b664",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(VBox(children=(Label(value='2016-01-01 <= YOUR DATE <= 2018-12-31'), DatePicker(value=None, desâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d185c88b38934a71bd9e687143dd25de",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from ipywidgets import interact, interactive, fixed, interact_manual, Layout, SelectMultiple\n",
    "import ipywidgets as widgets\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import display\n",
    "from datetime import datetime as dt\n",
    "import ipydatetime\n",
    "import time\n",
    "import matplotlib.ticker as mticker\n",
    "import matplotlib\n",
    "\n",
    "\n",
    "\n",
    "df = pd.read_csv('july_13_hampton_arcovia_hampton.csv')\n",
    "\n",
    "df['Date'] = pd.to_datetime(df['Date'],format='%d/%m/%Y')\n",
    "#df['Time'] = pd.to_datetime(df['Time'],format='%H:%M:%S.%f')\n",
    "#df['Time'] = pd.to_datetime(df['Time'],format='%I:%M' '%p')\n",
    "\n",
    "#data2 = df.loc[:,['Speed', 'Altitude', 'ir', 'luminosity', 'pm1s', 'pm25s', 'pm10s', 'pm1e', 'pm25e', 'pm10e', '03um01Lair', '05um01Lair', '1um01Lair', '25um01Lair', '5um01Lair', '10um01Lair', 'Co2', 'Temp', 'Hum']]\n",
    "#opts = data2.columns.values\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "start_date_widget = widgets.DatePicker(\n",
    "    description='Start Date',\n",
    "    disabled=False)\n",
    "\n",
    "\n",
    "end_date_widget = widgets.DatePicker(\n",
    "    description='End Date',\n",
    "    disabled=False\n",
    ")\n",
    "\n",
    "#opts = ['Speed', 'Altitude', 'ir', 'luminosity', 'pm1s', 'pm25s', 'pm10s', 'pm1e', 'pm25e', 'pm10e', 'a03um01Lair', 'a05um01Lair', 'a1um01Lair', 'a25um01Lair', 'a5um01Lair', 'a10um01Lair', 'Co2', 'Temp', 'Hum']\n",
    "#sensor_data_widget = widgets.SelectMultiple(\n",
    "#    options=opts,\n",
    "#    description='Sensor Data:',\n",
    "#    disabled=False,\n",
    "#    rows=3\n",
    "#    )\n",
    "\n",
    "speed_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.01, 3.0],\n",
    "    min=0.01,\n",
    "    max=3.0,\n",
    "    step=0.01,\n",
    "    description='Speed:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.3f',\n",
    ")\n",
    "\n",
    "Altitude_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.0, 150],\n",
    "    min=0.0,\n",
    "    max=150.0,\n",
    "    step=0.1,\n",
    "    description='Altitude:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "ir_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.0, 900.0],\n",
    "    min=0.0,\n",
    "    max=900.0,\n",
    "    step=1.0,\n",
    "    description='IR:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "luminosity_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.04, 3.0],\n",
    "    min=0.04,\n",
    "    max=3.0,\n",
    "    step=0.01,\n",
    "    description='Luminosity:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.5f',\n",
    ")\n",
    "\n",
    "pm1s_widget = widgets.FloatRangeSlider(\n",
    "    value=[1.0, 400.0],\n",
    "    min=1.0,\n",
    "    max=400.0,\n",
    "    step=1.0,\n",
    "    description='PM1s:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "pm25s_widget = widgets.FloatRangeSlider(\n",
    "    value=[1.0, 600.0],\n",
    "    min=1.0,\n",
    "    max=600.0,\n",
    "    step=1.0,\n",
    "    description='PM2.5s:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "pm10s_widget = widgets.FloatRangeSlider(\n",
    "    value=[1.0, 600.0],\n",
    "    min=1.0,\n",
    "    max=600.0,\n",
    "    step=1.0,\n",
    "    description='PM10s:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "pm1e_widget = widgets.FloatRangeSlider(\n",
    "    value=[1.0, 300.0],\n",
    "    min=1.0,\n",
    "    max=300.0,\n",
    "    step=1.0,\n",
    "    description='PM1e:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "pm25e_widget = widgets.FloatRangeSlider(\n",
    "    value=[1.0, 350.0],\n",
    "    min=1.0,\n",
    "    max=350.0,\n",
    "    step=1.0,\n",
    "    description='PM2.5e:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "pm10e_widget = widgets.FloatRangeSlider(\n",
    "    value=[1.0, 400.0],\n",
    "    min=1.0,\n",
    "    max=400.0,\n",
    "    step=1.0,\n",
    "    description='PM10e:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "a03um01Lair_widget = widgets.FloatRangeSlider(\n",
    "    value=[450.0, 53000.0],\n",
    "    min=450.0,\n",
    "    max=53000.0,\n",
    "    step=1.0,\n",
    "    description='03um01Lair:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "a05um01Lair_widget = widgets.FloatRangeSlider(\n",
    "    value=[130.0, 60000.0],\n",
    "    min=130.0,\n",
    "    max=60000.0,\n",
    "    step=1.0,\n",
    "    description='05um01Lair:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "a1um01Lair_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.0, 61000.0],\n",
    "    min=0.0,\n",
    "    max=61000.0,\n",
    "    step=1.0,\n",
    "    description='1um01Lair:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "a25um01Lair_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.0, 42000.0],\n",
    "    min=0.0,\n",
    "    max=42000.0,\n",
    "    step=0.01,\n",
    "    description='25um01Lair:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "a5um01Lair_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.0, 20000.0],\n",
    "    min=0.0,\n",
    "    max=20000.0,\n",
    "    step=1.0,\n",
    "    description='5um01Lair:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "a10um01Lair_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.0, 10000.0],\n",
    "    min=0.0,\n",
    "    max=10000.0,\n",
    "    step=1.0,\n",
    "    description='10um01Lair:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "Co2_widget = widgets.FloatRangeSlider(\n",
    "    value=[670.0, 1100.0],\n",
    "    min=670.0,\n",
    "    max=1100.0,\n",
    "    step=1.0,\n",
    "    description='CO2:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "Temp_widget = widgets.FloatRangeSlider(\n",
    "    value=[16.0, 70.0],\n",
    "    min=16.0,\n",
    "    max=70.0,\n",
    "    step=1.0,\n",
    "    description='Temperature:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "Hum_widget = widgets.FloatRangeSlider(\n",
    "    value=[0.0, 100.0],\n",
    "    min=0.0,\n",
    "    max=100.0,\n",
    "    step=1.0,\n",
    "    description='Humidity:',\n",
    "    disabled=False,\n",
    "    continuous_update=False,\n",
    "    orientation='horizontal',\n",
    "    readout=True,\n",
    "    readout_format='.1f',\n",
    ")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def change_parameters(start, end, speed, altitude, ir, luminosity, pm1s, pm25s, pm10s, pm1e, pm25e, pm10e, a03um01lair, a05um01lair, a1um01lair, a25um01lair, a5um01lair, a10um01lair, co2, temp, hum):\n",
    "    #start_date = pd.to_datetime('2016-01-01')\n",
    "    #end_date = pd.to_datetime('2018-12-31')\n",
    "    \n",
    "    #if check_date(start):\n",
    "    #    start_date = pd.to_datetime(start)\n",
    "    #if check_date(end):\n",
    "    #    end_date = pd.to_datetime(end)\n",
    "\n",
    "    #print(\"Start date set to: \" + str(start_date))\n",
    "    #print(\"End date set to: \" + str(end_date))\n",
    "    \n",
    "    speedlow = speed[0]\n",
    "    speedhigh = speed[1]\n",
    "    \n",
    "    altitudelow = altitude[0]\n",
    "    altitudehigh = altitude[1]\n",
    "    \n",
    "    irlow = ir[0]\n",
    "    irhigh = ir[1]\n",
    " \n",
    "    luminositylow = luminosity[0]\n",
    "    luminosityhigh = luminosity[1]\n",
    " \n",
    "    pm1slow = pm1s[0]\n",
    "    pm1shigh = pm1s[1]\n",
    " \n",
    "    pm25slow = pm25s[0]\n",
    "    pm25shigh = pm25s[1]\n",
    " \n",
    "    pm10slow = pm10s[0]\n",
    "    pm10shigh = pm10s[1]\n",
    " \n",
    "    pm1elow = pm1e[0]\n",
    "    pm1ehigh = pm1e[1]\n",
    " \n",
    "    pm25elow = pm25e[0]\n",
    "    pm25ehigh = pm25e[1]\n",
    " \n",
    "    pm10elow = pm10e[0]\n",
    "    pm10ehigh = pm10e[1]\n",
    " \n",
    "    a03um01lairlow = a03um01lair[0]\n",
    "    a03um01lairhigh = a03um01lair[1]\n",
    " \n",
    "    a05um01lairlow = a05um01lair[0]\n",
    "    a05um01lairhigh = a05um01lair[1]\n",
    " \n",
    "    a1um01lairlow = a1um01lair[0]\n",
    "    a1um01lairhigh = a1um01lair[1]\n",
    " \n",
    "    a25um01lairlow = a25um01lair[0]\n",
    "    a25um01lairhigh = a25um01lair[1]\n",
    " \n",
    "    a5um01lairlow = a5um01lair[0]\n",
    "    a5um01lairhigh = a5um01lair[1]\n",
    " \n",
    "    a10um01lairlow = a10um01lair[0]\n",
    "    a10um01lairhigh = a10um01lair[1]\n",
    " \n",
    "    co2low = co2[0]\n",
    "    co2high = co2[1]\n",
    " \n",
    "    templow = temp[0]\n",
    "    temphigh = temp[1]\n",
    " \n",
    "    humlow = hum[0]\n",
    "    humhigh = hum[1]\n",
    " \n",
    "    \n",
    " \n",
    " \n",
    "    df_date_update = df.loc[(start <= df['Date'].dt.date) & (end >= df['Date'].dt.date)]\n",
    "    df_speed_update = df_date_update[df_date_update.Speed.between(speedlow,speedhigh)]\n",
    "    df_altitude_update = df_speed_update[df_speed_update.Altitude.between(altitudelow,altitudehigh)]\n",
    "    df_ir_update = df_altitude_update[df_altitude_update.ir.between(irlow,irhigh)]\n",
    "    df_luminosity_update = df_ir_update[df_ir_update.luminosity.between(luminositylow,luminosityhigh)]\n",
    "    df_pm1s_update = df_luminosity_update[df_luminosity_update.pm1s.between(pm1slow,pm1shigh)]\n",
    "    df_pm25s_update = df_pm1s_update[df_pm1s_update.pm25s.between(pm25slow,pm25shigh)]\n",
    "    df_pm10s_update = df_pm25s_update[df_pm25s_update.pm10s.between(pm10slow,pm10shigh)]\n",
    "    df_pm1e_update = df_pm10s_update[df_pm10s_update.pm1e.between(pm1elow,pm1ehigh)]  \n",
    "    df_pm25e_update = df_pm1e_update[df_pm1e_update.pm25e.between(pm25elow,pm25ehigh)]\n",
    "    df_pm10e_update = df_pm25e_update[df_pm25e_update.pm10e.between(pm10elow,pm10ehigh)] \n",
    "    df_a03um01lair_update = df_pm10e_update[df_pm10e_update.a03um01Lair.between(a03um01lairlow,a03um01lairhigh)]\n",
    "    df_a05um01lair_update = df_a03um01lair_update[df_a03um01lair_update.a05um01Lair.between(a05um01lairlow,a05um01lairhigh)]\n",
    "    df_a1um01lair_update = df_a05um01lair_update[df_a05um01lair_update.a1um01Lair.between(a1um01lairlow,a1um01lairhigh)]\n",
    "    df_a25um01lair_update = df_a1um01lair_update[df_a1um01lair_update.a25um01Lair.between(a25um01lairlow,a25um01lairhigh)]\n",
    "    df_a5um01lair_update = df_a25um01lair_update[df_a25um01lair_update.a10um01Lair.between(a5um01lairlow,a5um01lairhigh)]\n",
    "    df_a10um01lair_update = df_a5um01lair_update[df_a5um01lair_update.a10um01Lair.between(a10um01lairlow,a10um01lairhigh)]\n",
    "    df_co2_update = df_a10um01lair_update[df_a10um01lair_update.Co2.between(co2low,co2high)]\n",
    "    df_temp_update = df_co2_update[df_co2_update.Temp.between(templow,temphigh)]\n",
    "    df_hum_update = df_temp_update[df_temp_update.Hum.between(humlow,humhigh)]\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "    DATE = df_co2_update.Date\n",
    "    TIME = df_co2_update.Time\n",
    "    SPEED = df_co2_update.Speed\n",
    "    ALTITUDE = df_co2_update.Altitude\n",
    "    IR = df_co2_update.ir\n",
    "    LUMINOSITY = df_co2_update.luminosity\n",
    "    PM1S = df_co2_update.pm1s\n",
    "    PM25S = df_co2_update.pm25s\n",
    "    PM10S = df_co2_update.pm10s\n",
    "    PM1E = df_co2_update.pm1e\n",
    "    PM25E = df_co2_update.pm25e\n",
    "    PM10E = df_co2_update.pm10e\n",
    "    A03UM01LAIR = df_co2_update.a03um01Lair\n",
    "    A05UM01LAIR = df_co2_update.a05um01Lair\n",
    "    A1UM01LAIR = df_co2_update.a1um01Lair\n",
    "    A25UM01LAIR = df_co2_update.a25um01Lair\n",
    "    A5UM01LAIR = df_co2_update.a5um01Lair\n",
    "    A10UM01LAIR = df_co2_update.a10um01Lair\n",
    "    CO2 = df_co2_update.Co2\n",
    "    TEMP = df_co2_update.Temp\n",
    "    HUM = df_co2_update.Hum\n",
    "    \n",
    "    display(df_co2_update)\n",
    "    \n",
    "        \n",
    "        \n",
    "    figspeed, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figspeed.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, SPEED, 'tab:blue', label = 'SPEED')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figspeed.show()\n",
    "    plt.savefig('speed.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('speed.pdf', bbox_inches='tight', pad_inches=0.01)\n",
    "        \n",
    "        \n",
    "        \n",
    "    figaltitude, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figaltitude.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, ALTITUDE, 'tab:blue', label = 'ALTITUDE')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figaltitude.show()\n",
    "    plt.savefig('altitude.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('altitude.pdf', bbox_inches='tight', pad_inches=0.01)\n",
    "        \n",
    "\n",
    "    figir, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figir.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, IR, 'tab:blue', label = 'IR')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figir.show()\n",
    "    plt.savefig('ir.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('ir.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figluminosity, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figluminosity.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, LUMINOSITY, 'tab:blue', label = 'LUMINOSITY')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figluminosity.show()\n",
    "    plt.savefig('luminosity.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('luminosisty.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figpm1s, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figpm1s.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, PM1S, 'tab:blue', label = 'PM1S')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figpm1s.show()\n",
    "    plt.savefig('pm1s.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('pm1s.pdf', bbox_inches='tight', pad_inches=0.01)\n",
    "        \n",
    "\n",
    "    figpm25s, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figpm25s.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME,PM25S , 'tab:blue', label = 'PM25S')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figpm25s.show()\n",
    "    plt.savefig('pm25s.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('pm25s.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    " \n",
    "    figpm10s, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figpm10s.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, PM10S, 'tab:blue', label = 'PM10S')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figpm10s.show()\n",
    "    plt.savefig('pm10s.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('pm10s.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    " \n",
    "    figpm1e, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figpm1e.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, PM1E, 'tab:blue', label = 'PM1E')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figpm1e.show()\n",
    "    plt.savefig('pm1e.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('pm1e.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figpm25e, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figpm25e.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, PM25E, 'tab:blue', label = 'PM25E')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figpm25e.show()\n",
    "    plt.savefig('pm25e.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('pm25e.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figpm10e, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figpm10e.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, PM10E, 'tab:blue', label = 'PM10E')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figpm10e.show()\n",
    "    plt.savefig('pm10e.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('pm10e.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figa03um01Lair, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figa03um01Lair.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, A03UM01LAIR, 'tab:blue', label = 'A03UM01LAIR')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figa03um01Lair.show()\n",
    "    plt.savefig('a03um01lair.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('a03um01lair.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figa05um01Lair, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figa05um01Lair.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, A05UM01LAIR, 'tab:blue', label = 'A05UM01LAIR')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figa05um01Lair.show()\n",
    "    plt.savefig('a05um01lair.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('a05um01lair.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figa1um01Lair, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figa1um01Lair.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, A1UM01LAIR, 'tab:blue', label = 'A1UM01LAIR')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figa1um01Lair.show()\n",
    "    plt.savefig('a1um01lair.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('a1um01lair.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figa25um01Lair, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figa25um01Lair.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, A25UM01LAIR, 'tab:blue', label = 'A25UM01LAIR')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figa25um01Lair.show()\n",
    "    plt.savefig('a25um01lair.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('a25um01lair.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figa5um01Lair, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figa5um01Lair.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, A5UM01LAIR, 'tab:blue', label = 'A5UM01LAIR')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figa5um01Lair.show()\n",
    "    plt.savefig('a5um01lair.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('a5um01lair.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figa10um01Lair, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figa10um01Lair.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, A10UM01LAIR, 'tab:blue', label = 'A10UM01LAIR')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figa10um01Lair.show()\n",
    "    plt.savefig('a10um01lair.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('a10um01lair.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figCo2, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figCo2.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, CO2, 'tab:blue', label = 'CO2')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figCo2.show()\n",
    "    plt.savefig('co2.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('co2.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figTemp, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figTemp.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, TEMP, 'tab:blue', label = 'TEMP')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figTemp.show()\n",
    "    plt.savefig('temp.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('temp.pdf', bbox_inches='tight', pad_inches=0.01)    \n",
    "\n",
    "    figHum, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(15,15))\n",
    "    figHum.subplots_adjust(hspace=0)\n",
    "        \n",
    "    ax1.yaxis.set_major_locator(mticker.MultipleLocator(1))\n",
    "    ax1.plot(TIME, LUMINOSITY, label = 'LUX')\n",
    "    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)\n",
    "    ax1.grid() \n",
    "        \n",
    "    ax2.set_xlabel('$time$', fontsize=24)\n",
    "    ax2.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n",
    "    ax2.set_ylabel('$Sensor Data$', fontsize=24)\n",
    "    ax2.plot(TIME, HUM, 'tab:blue', label = 'HUM')\n",
    "    ax2.legend(loc='center left', bbox_to_anchor=(1, 1), fontsize=12)\n",
    "    ax2.grid()\n",
    "    figHum.show()   \n",
    "    plt.savefig('hum.eps', bbox_inches='tight', pad_inches=0.01)\n",
    "    plt.savefig('hum.pdf', bbox_inches='tight', pad_inches=0.01)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "out = widgets.interactive_output(\n",
    "        change_parameters, \n",
    "          {'start': start_date_widget, \n",
    "           'end': end_date_widget, \n",
    "           'speed': speed_widget,\n",
    "           'altitude': Altitude_widget,\n",
    "           'ir': ir_widget,\n",
    "           'luminosity': luminosity_widget,\n",
    "           'pm1s': pm1s_widget,\n",
    "           'pm25s': pm25s_widget,\n",
    "           'pm10s': pm10s_widget,\n",
    "           'pm1e': pm1e_widget,\n",
    "           'pm25e': pm25e_widget,\n",
    "           'pm10e': pm10e_widget,\n",
    "           'a03um01lair': a03um01Lair_widget,\n",
    "           'a05um01lair': a05um01Lair_widget,\n",
    "           'a1um01lair': a1um01Lair_widget,\n",
    "           'a25um01lair': a25um01Lair_widget,\n",
    "           'a5um01lair': a5um01Lair_widget,\n",
    "           'a10um01lair': a10um01Lair_widget,\n",
    "           'co2': Co2_widget,\n",
    "           'temp': Temp_widget,\n",
    "           'hum': Hum_widget\n",
    "           #'sensor_data': sensor_data_widget\n",
    "          }\n",
    "      )\n",
    "ui = widgets.HBox(\n",
    "        [widgets.VBox(\n",
    "          [widgets.Label(\"2016-01-01 <= YOUR DATE <= 2018-12-31\"), start_date_widget, end_date_widget]),\n",
    "         speed_widget,\n",
    "         Altitude_widget,\n",
    "         ir_widget,\n",
    "         luminosity_widget,\n",
    "         pm1s_widget,\n",
    "         pm25s_widget,\n",
    "         pm10s_widget,\n",
    "         pm1e_widget,\n",
    "         pm25e_widget,\n",
    "         pm10e_widget,\n",
    "         a03um01Lair_widget,\n",
    "         a05um01Lair_widget,\n",
    "         a1um01Lair_widget,\n",
    "         a25um01Lair_widget,\n",
    "         a5um01Lair_widget,\n",
    "         a10um01Lair_widget,\n",
    "         Co2_widget,\n",
    "         Temp_widget,\n",
    "         Hum_widget,\n",
    "         #sensor_data_widget\n",
    "        ], \n",
    "        layout=Layout(display='flex', flex_flow='row wrap', justify_content='space-between')\n",
    "    )\n",
    "display(ui, out)\n",
    "         \n",
    "\n",
    "#out = widgets.interactive_output()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9ce77fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip freeze > requirements.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d1f1128d-38d0-4e0e-aedd-5abaaf233e9d",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'encodestring' from 'base64' (/home/frakesmart/anaconda3/envs/aneolipo/lib/python3.9/base64.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-6514f5590a33>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mnbinteract\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnbi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbinteract/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"numpy.ufunc size changed\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mexporters\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mplotting\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mquestions\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbinteract/exporters.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mIPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mJavascript\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMarkdown\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mnbconvert\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mHTMLExporter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtraitlets\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdefault\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mUnicode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTraitError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbconvert/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0m_version\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mversion_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m__version__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mexporters\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfilters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpreprocessors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbconvert/exporters/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m from .base import (export, get_exporter, \n\u001b[0m\u001b[1;32m      2\u001b[0m                    ExporterNameError, get_export_names)\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mhtml\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mHTMLExporter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mslides\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSlidesExporter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mtemplateexporter\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTemplateExporter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbconvert/exporters/base.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtraitlets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimportstring\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mimport_item\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mnbformat\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mNotebookNode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mipython_genutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpy3compat\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mstring_types\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbformat/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0m_version\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mversion_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m__version__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mv1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mv2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mv3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbformat/v1/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m )\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mnbjson\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mreads\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mreads_json\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrites\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mwrites_json\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mnbjson\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mreads\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mread_json\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrites\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mwrite_json\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mnbjson\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mto_notebook\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mto_notebook_json\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/aneolipo/lib/python3.9/site-packages/nbformat/v1/nbjson.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m#-----------------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mbase64\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mencodestring\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mrwbase\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mNotebookReader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotebookWriter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mnbbase\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfrom_dict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'encodestring' from 'base64' (/home/frakesmart/anaconda3/envs/aneolipo/lib/python3.9/base64.py)"
     ]
    }
   ],
   "source": [
    "import nbinteract as nbi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7a526737",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'nbi' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-6445214a4c11>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnbi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpublish\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/home/frakesmart/Desktop/LIPO'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Characterization.Final.ipynb'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'nbi' is not defined"
     ]
    }
   ],
   "source": [
    "nbi.publish('/home/frakesmart/Desktop/LIPO', 'Characterization.Final.ipynb')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbf10668",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
